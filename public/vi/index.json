[
{
	"uri": "//localhost:1313/vi/",
	"title": "API-First Development",
	"tags": [],
	"description": "",
	"content": "Phát triển API-First với OpenAPI và Code Generation Tổng quan Trong bài lab này, bạn sẽ tìm hiểu các khái niệm cơ bản và thực hành về API Gateway, Lambda function, CodeBuild và CodePipeline. Thực hành triển khai api với OpenAPI cũng như việc tự động hóa quá trình triển khai và kiểm tra code sau khi đẩy lên github.\nNội dung Giới thiệu Các bước chuẩn bị Tạo kết nối đến máy chủ EC2 API-First Development logs Port Forwarding Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/4-s3log/4.1-updateiamrole/",
	"title": "Cập nhật IAM Role",
	"tags": [],
	"description": "",
	"content": "Để các EC2 instance của chúng ta có thể gửi session log tới S3 bucket , chúng ta sẽ cần cập nhật IAM Role đã gán vào EC2 instance bằng cách thêm vào policy cho phép quyền truy cập vào S3.\nCập nhật IAM Role Truy cập vào giao diện quản trị dịch vụ IAM Click Roles. Tại ô tìm kiếm , điền SSM. Click vào role SSM-Role. Click Attach policies. Tại ô Search điền S3. Click chọn policy AmazonS3FullAccess. Click Attach policy. Trong thực tế chúng ta sẽ cấp quyền chặt chẽ hơn tới S3 bucket chỉ định. Trong khuôn khổ bài lab này chúng ta sử dụng policy AmazonS3FullAccess cho tiện dụng.\nTiếp theo chúng ta sẽ tiến hành tạo S3 bucket để lưu trữ session logs.\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.1-createdynamodb/",
	"title": "Chuẩn bị bảng DynamoDB",
	"tags": [],
	"description": "",
	"content": "Tạo DynamoDB Table Trước tiên, chúng ta cần tạo cơ sở dữ liệu để lưu trữ thông tin người dùng. DynamoDB là lựa chọn tối ưu cho serverless architecture vì nó có khả năng scale tự động và tích hợp tốt với Lambda.\nTrong bước này, chúng ta sẽ cần tạo một bảng DynamoDB tên là Users , với Partition key là userID (String)\nCác bước bạn cần hoàn tất bước này sẽ như sau:\nVào DynamoDB Console Nhấn Create table Table name: Users Partition key: userID (String) Nhấn Create table Vào DynamoDB Console: Truy cập vào AWS Management Console và tìm kiếm DynamoDB. Nhấn Create table: Tại trang DynamoDB, bạn sẽ thấy nút \u0026ldquo;Create table\u0026rdquo; ở góc trên bên phải. Điền thông tin bảng: Nhập tên bảng là Users và Partition key là userID với kiểu dữ liệu là String. Các thông số khác có thể để mặc định. Cuối cùng, nhấn Create table để hoàn tất. Sau khi tạo bảng, bạn sẽ thấy bảng Users trong danh sách các bảng DynamoDB của bạn. Bạn có thể nhấn vào tên bảng để xem chi tiết và quản lý dữ liệu trong bảng này. "
},
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Trong thời đại phát triển phần mềm hiện đại, việc thiết kế và phát triển API không chỉ còn là một bước phụ mà đã trở thành trọng tâm trong quy trình phát triển ứng dụng. Với phương pháp API-First Development, toàn bộ hệ thống được xây dựng xoay quanh các đặc tả API (API specifications), đảm bảo tính nhất quán, khả năng tái sử dụng và tốc độ phát triển vượt trội.\nĐề tài này triển khai một nền tảng API-First hoàn chỉnh trên AWS, kết hợp các công cụ và dịch vụ hiện đại như:\nOpenAPI Specification: Chuẩn hóa thiết kế API ngay từ đầu. Code Generation: Tự động sinh code server và client từ file OpenAPI. AWS Lambda \u0026amp; API Gateway: Triển khai API không máy chủ (serverless). DynamoDB: Lưu trữ dữ liệu theo mô hình NoSQL, hiệu quả và mở rộng tốt. CodePipeline \u0026amp; CodeBuild: Tự động hóa toàn bộ quy trình CI/CD. Jest \u0026amp; Coverage: Đảm bảo chất lượng bằng kiểm thử tự động và đo độ bao phủ mã. Redoc: Tạo tài liệu API đẹp mắt, tự động từ file OpenAPI. Mục tiêu Xây dựng một workflow phát triển API hiện đại với:\nThiết kế API trước (API-first) Sinh mã nguồn tự động Tích hợp kiểm thử và tài liệu hoá Tự động hoá triển khai trên AWS Lý do chọn đề tài Giảm thời gian phát triển và bảo trì API đến 70% Giải quyết vấn đề inconsistency giữa code và tài liệu Tạo ra một nền tảng dễ mở rộng, có thể tái sử dụng trong nhiều dự án "
},
{
	"uri": "//localhost:1313/vi/3-accessibilitytoinstances/3.1-public-instance/",
	"title": "Kết nối đến máy chủ Public",
	"tags": [],
	"description": "",
	"content": "\nTruy cập vào giao diện quản trị của dịch vụ EC2. Click chọn Public Linux Instance. Click Actions. Click Security. Click Modify IAM role. Tại trang Modify IAM role. Click chọn SSM-Role. Click Save. Bạn sẽ cần chờ khoảng 10 phút trước khi thực hiện bước tiếp theo. Thời gian này EC2 instance của chúng ta sẽ tự động đăng ký với Session Manager.\nTruy cập vào giao diện quản trị của dịch vụ AWS Systems Manager Kéo thanh trượt menu bên trái xuống dưới. Click Session Manager. Click Start Session. Sau đó chọn Public Linux Instance và click Start session để truy cập vào instance. Terminal sẽ xuất hiện trên trình duyệt. Kiểm tra với câu lệnh sudo tcpdump -nn port 22 và sudo tcpdump chúng ta sẽ thấy không có traffic của SSH mà chỉ có traffic HTTPS. Ở trên, chúng ta đã tạo kết nối vào public instance mà không cần mở cổng SSH 22, giúp cho việc bảo mật tốt hơn, tránh mọi sự tấn công tới cổng SSH.\nMột nhược điểm của cách làm trên là ta phải mở Security Group outbound ở cổng 443 ra ngoài internet. Vì là public instance nên có thể sẽ không vấn đề gì nhưng nếu bạn muốn bảo mật hơn nữa, bạn có thể khoá cổng 443 ra ngoài internet mà vẫn sử dụng được Session Manager. Chúng ta sẽ đi qua cách làm này ở phần private instance dưới đây.\nBạn có thể terminate để kết thúc session đang kết nối trước khi qua bước tiếp theo.\n"
},
{
	"uri": "//localhost:1313/vi/3-accessibilitytoinstances/3.2-private-instance/3.2.1-enablevpcdns/",
	"title": "Kích hoạt DNS hostnames",
	"tags": [],
	"description": "",
	"content": "Kích hoạt tính năng DNS hostnames trên VPC. Để tạo được VPC Endpoint chúng ta sẽ cần bật tính năng DNS hostnames trên VPC. Truy cập đến giao diện quản trị của dịch vụ VPC\nClick Your VPCs.\nChọn Lab VPC.\nClick Actions.\nClick Edit DNS hostnames.\nClick Endpoint, sau đó click Create Endpoint.\nTại trang Edit DNS hostnames. Click chọn Enable. Click Save changes. "
},
{
	"uri": "//localhost:1313/vi/3-accessibilitytoinstances/3.2-private-instance/3.2.2-createvpcendpoint/3.2.2.1-endpointssm/",
	"title": "Tạo Endpoint ssm",
	"tags": [],
	"description": "",
	"content": "Tạo VPC Endpoint SSM Truy cập đến giao diện quản trị của dịch vụ VPC Click Endpoints. Click Create endpoint. Tại trang Create endpoint. Tại mục Name tag điền SSM. Tại mục Service Category chọn AWS Services. Tại mục Service Name, Tại mục Service category chọn: AWS services Tại mục Service Name nhập: SSM sau đó chọn Service Name: com.amazonaws.ap-southeast-1.ssm. Tại cột Service Name, click chọn com.amazonaws.ap-southeast-1.ssm. Tại mục VPC, chọn Lab VPC. Chọn AZ đầu tiên, sau đó chọn subnet Lab Private Subnet. Kéo chuột xuống dưới. Tại mục Security Group, chọn Security group SG VPC Endpoint mà chúng ta đã tạo trước đó. Tại mục Policy, chọn Full access Kéo chuột xuống dưới cùng. Click Create endpoint. Chúng ta đã tạo xong VPC Interface Endpoint cho SSM. "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "\rBạn cần tạo sẵn 1 bảng DynamoDB, 1 Lambda function và 1 API Gateway để thực hiện bài thực hành này.\nKiến trúc đơn giản DynamoDB: Lưu trữ dữ liệu người dùng Lambda Function: Xử lý CRUD operations API Gateway: REST API endpoints Sau đây là các bước tạo DynamoDB, Lambda và API Gateway\nNội dung Tạo bảng trong DynamoDB Tạo IAM Role "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.3-createapigatway/",
	"title": "Tạo API Gateway",
	"tags": [],
	"description": "",
	"content": "Tạo API Gateway Trong bước này, chúng ta sẽ tạo một API Gateway để kết nối với Lambda function và DynamoDB. API Gateway sẽ cung cấp các endpoint để thực hiện các thao tác CRUD trên bảng DynamoDB thông qua Lambda function.\nCác bước bạn cần hoàn tất bước này sẽ như sau:\nVào API Gateway Console Nhấn Create API Chọn REST API và nhấn Build Nhập thông tin cho API: API name: UserServiceAPI Description: API for User Service Endpoint Type: Regional Nhấn Create API để hoàn tất việc tạo API Gateway. Vào API Gateway Console: Truy cập vào AWS Management Console và tìm kiếm API Gateway. Nhấn Create API: Tại trang API Gateway, bạn sẽ thấy nút \u0026ldquo;Create API\u0026rdquo; ở góc trên bên phải. Chọn REST API: Chọn tùy chọn \u0026ldquo;REST API\u0026rdquo; và nhấn nút \u0026ldquo;Build\u0026rdquo; để bắt đầu tạo API. Chọn New API: Chọn tùy chọn \u0026ldquo;New API\u0026rdquo; để tạo một API mới. Điền thông tin API: Nhập tên API là UserServiceAPI, mô tả là API for User Service, và chọn loại endpoint là Regional. Các thông số khác có thể để mặc định. Cuối cùng, nhấn Create API để hoàn tất. "
},
{
	"uri": "//localhost:1313/vi/3-accessibilitytoinstances/3.2-private-instance/3.2.2-createvpcendpoint/3.2.2.2-endpointssmmessages/",
	"title": "Tạo Endpoint ssmmessages",
	"tags": [],
	"description": "",
	"content": "Tạo VPC Endpoint SSMMESSAGES Truy cập đến giao diện quản trị của dịch vụ VPC Click Endpoints. Click Create endpoint. Tại trang Create endpoint. Tại mục Name tag điền SSMMESSAGES. Tại mục Service Category chọn AWS Services. Tại mục Service Name, Tại mục Service category chọn: AWS services Tại mục Service Name nhập: ssmmessages sau đó chọn Service Name: com.amazonaws.ap-southeast-1.ssmmessages. Tại cột Service Name, click chọn com.amazonaws.ap-southeast-1.ssmmessages. Tại mục VPC, chọn Lab VPC. Chọn AZ đầu tiên, sau đó chọn subnet Lab Private Subnet. Kéo chuột xuống dưới. Tại mục Security Group, chọn Security group SG VPC Endpoint mà chúng ta đã tạo trước đó. Tại mục Policy, chọn Full access Kéo chuột xuống dưới cùng. Click Create endpoint. Chúng ta đã tạo xong VPC Interface Endpoint SSMMESSAGES. "
},
{
	"uri": "//localhost:1313/vi/3-accessibilitytoinstances/3.2-private-instance/",
	"title": "Tạo kết nối đến máy chủ EC2 Private",
	"tags": [],
	"description": "",
	"content": "Đối với Windows instance nằm trong private subnet, không có public IP, không có internet gateway nên không thể đi ra ngoài internet.\nVới loại instance này, cách làm truyền thống là ta sẽ sử dụng kỹ thuật Bastion host tốn nhiều chi phí và công sức, nhưng ở đây chúng ta sẽ sử dụng Session Manager với loại này.\nCơ bản là private instance vẫn phải mở cổng TCP 443 tới System Manager, nhưng không cho kết nối đó đi ra ngoài internet mà chỉ cho đi trong chính VPC của mình, nên đảm bảo được vấn đề bảo mật.\nĐể làm được điều đó, ta phải đưa endpoint của System Manager vào trong VPC, nghĩa là sử dụng VPC interface endpoint:\nVPC interface endpoint được gắn với subnet nên cách làm này không những với private subnet mà còn có thể làm với public subnet, nghĩa là với public subnet, bạn hoàn toàn có thể không cho TCP 443 đi ra ngoài internet.\nNội dung: Kích hoạt DNS hostnames Tạo VPC Endpoint Kết nối Private Instance "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.2-createlambda/",
	"title": "Tạo Lambda Function",
	"tags": [],
	"description": "",
	"content": "1: Tạo Lambda Function Trong bước này, chúng ta sẽ tạo một Lambda function để xử lý các yêu cầu từ API Gateway. Lambda function này sẽ thực hiện các thao tác CRUD (Create, Read, Update, Delete) trên bảng DynamoDB mà chúng ta đã tạo ở bước trước. Vì để đơn giản nên chúng ta dùng 1 Lambda function duy nhất để xử lý tất cả các yêu cầu CRUD. Các bạn có thể tạo nhiều Lambda function khác nhau cho từng thao tác CRUD nếu muốn.\nCác bước bạn cần hoàn tất bước này sẽ như sau:\nVào Lambda Console Nhấn Create function Function name: UserService Runtime: Node.js 18.x Nhấn Create function Vào Lambda Console: Truy cập vào AWS Management Console và tìm kiếm Lambda. Nhấn Create function: Tại trang Lambda, bạn sẽ thấy nút \u0026ldquo;Create function\u0026rdquo; ở góc trên bên phải. Điền thông tin function: Nhập tên function là UserService, chọn Runtime là Node.js 18.x. Các thông số khác có thể để mặc định. Cuối cùng, nhấn Create function để hoàn tất.\nỞ đây chúng ta sử dụng Node.js làm ngôn ngữ lập trình cho Lambda function. Bạn có thể chọn ngôn ngữ khác nếu muốn, nhưng cần đảm bảo rằng mã nguồn của bạn tương thích với runtime đó.\nVà vì trước đó mình đã tạo 1 lambda function với tên là UserService nên mình sẽ ghi thành UserService1 để tránh trùng tên. Còn nếu bạn chưa tạo thì có thể để tên là UserService.\nNgoài thông tin về tên và runtime, bạn có thể để các thông số khác mặc định. Sau khi nhấn Create function, Lambda sẽ tạo function cho bạn. Role IAM sẽ được tạo tự động để cho phép Lambda truy cập vào các dịch vụ AWS khác như DynamoDB.\nNhấn Create function: Sau khi điền đầy đủ thông tin, nhấn nút \u0026ldquo;Create function\u0026rdquo; để hoàn tất việc tạo Lambda function. Sau khi tạo function, bạn sẽ thấy trang quản lý của Lambda function UserService. Tại đây, bạn có thể cấu hình các thông số khác như quyền truy cập, biến môi trường, và mã nguồn của function. 2: Tải mã nguồn cho Lambda Function Bây giờ chúng ta sẽ tải mã nguồn cho Lambda function UserService. Mã nguồn này sẽ bao gồm các hàm để xử lý các yêu cầu CRUD từ API Gateway và tương tác với DynamoDB. Bạn có thể tải mã nguồn trực tiếp lên Lambda hoặc sử dụng AWS CLI hoặc AWS SDK để tải mã nguồn từ máy tính của bạn lên Lambda. Để đơn giản, chúng ta sẽ thêm mã nguồn trực tiếp lên Lambda.\nTrong trang quản lý Lambda function UserService, ở tab \u0026ldquo;Code\u0026rdquo;, bạn sẽ thấy một trình soạn thảo mã nguồn. Sao chép và dán mã nguồn sau vào trình soạn thảo: const { DynamoDBClient } = require(\u0026#39;@aws-sdk/client-dynamodb\u0026#39;); const { DynamoDBDocumentClient, ScanCommand, GetCommand, PutCommand, UpdateCommand, DeleteCommand } = require(\u0026#39;@aws-sdk/lib-dynamodb\u0026#39;); const { randomUUID } = require(\u0026#39;crypto\u0026#39;); const client = new DynamoDBClient({}); const dynamodb = DynamoDBDocumentClient.from(client); const TABLE_NAME = \u0026#39;Users\u0026#39;; exports.handler = async (event) =\u0026gt; { console.log(\u0026#34;Event Received:\u0026#34;, { resource: event.resource, path: event.path, pathParameters: event.pathParameters, }); const { httpMethod, pathParameters, body, resource } = event; try { switch (httpMethod) { case \u0026#39;GET\u0026#39;: if (resource === \u0026#39;/v1/users\u0026#39;) { return await getAllUsers(); } else if (resource === \u0026#39;/v1/users/{userID}\u0026#39; \u0026amp;\u0026amp; pathParameters?.userID) { return await getUserById(pathParameters.userID); } break; case \u0026#39;POST\u0026#39;: if (resource === \u0026#39;/v1/users\u0026#39;) { return await createUser(JSON.parse(body)); } break; case \u0026#39;PUT\u0026#39;: if (resource === \u0026#39;/v1/users/{userID}\u0026#39; \u0026amp;\u0026amp; pathParameters?.userID) { return await updateUser(pathParameters.userID, JSON.parse(body)); } break; case \u0026#39;DELETE\u0026#39;: if (resource === \u0026#39;/v1/users/{userID}\u0026#39; \u0026amp;\u0026amp; pathParameters?.userID) { return await deleteUser(pathParameters.userID); } break; } return { statusCode: 404, body: JSON.stringify({ message: \u0026#39;Not Found\u0026#39; }) }; } catch (error) { console.error(\u0026#34;Lambda Error:\u0026#34;, { message: error.message, stack: error.stack }); return { statusCode: 500, body: JSON.stringify({ message: error.message || \u0026#39;Internal server error\u0026#39; }) }; } }; // ========== DynamoDB Functions ========== async function getAllUsers() { const result = await dynamodb.send(new ScanCommand({ TableName: TABLE_NAME })); return { statusCode: 200, body: JSON.stringify(result.Items) }; } async function getUserById(userID) { const result = await dynamodb.send(new GetCommand({ TableName: TABLE_NAME, Key: { userID } })); if (!result.Item) { return { statusCode: 404, body: JSON.stringify({ message: \u0026#39;User not found\u0026#39; }) }; } return { statusCode: 200, body: JSON.stringify(result.Item) }; } async function createUser(userData) { const userID = randomUUID(); const user = { userID, ...userData }; await dynamodb.send(new PutCommand({ TableName: TABLE_NAME, Item: user })); return { statusCode: 201, body: JSON.stringify(user) }; } async function updateUser(userID, userData) { const updateExpression = []; const expressionAttributeValues = {}; const expressionAttributeNames = {}; Object.keys(userData).forEach(key =\u0026gt; { updateExpression.push(`#${key} = :${key}`); expressionAttributeValues[`:${key}`] = userData[key]; expressionAttributeNames[`#${key}`] = key; }); try { const result = await dynamodb.send(new UpdateCommand({ TableName: TABLE_NAME, Key: { userID }, UpdateExpression: `SET ${updateExpression.join(\u0026#39;, \u0026#39;)}`, ExpressionAttributeValues: expressionAttributeValues, ExpressionAttributeNames: expressionAttributeNames, ConditionExpression: \u0026#39;attribute_exists(userID)\u0026#39;, ReturnValues: \u0026#39;ALL_NEW\u0026#39; })); return { statusCode: 200, body: JSON.stringify(result.Attributes) }; } catch (error) { if (error.name === \u0026#39;ConditionalCheckFailedException\u0026#39;) { return { statusCode: 404, body: JSON.stringify({ message: \u0026#39;User not found\u0026#39; }) }; } throw error; } } async function deleteUser(userID) { await dynamodb.send(new DeleteCommand({ TableName: TABLE_NAME, Key: { userID } })); return { statusCode: 204, body: \u0026#39;\u0026#39; }; } khi bạn vừa thêm mã nguồn mới, Lambda sẽ thông báo rằng mã nguồn đã được thay đổi và yêu cầu bạn lưu lại. 3. Nhấn Deploy để lưu thay đổi. Ở bước này mình thêm /v1/users vào đầu các đường dẫn để dễ dàng quản lý và mở rộng API trong tương lai. Bạn có thể thay đổi đường dẫn này nếu muốn, nhưng hãy nhớ cập nhật lại trong mã nguồn và cấu hình API Gateway sau này.\n3: Cấp quyền truy cập DynamoDB cho Lambda Function Để Lambda function có thể truy cập vào bảng DynamoDB, chúng ta cần cấp quyền truy cập cho Lambda function này. Điều này được thực hiện thông qua IAM Role mà Lambda function sử dụng.\nTrong trang quản lý Lambda function UserService, vào tag \u0026ldquo;Configuration\u0026rdquo;, vào tag \u0026ldquo;Permissions\u0026rdquo;, cuộn xuống phần \u0026ldquo;Execution role\u0026rdquo;.\nNhấn vào liên kết IAM role ở phần \u0026ldquo;role name\u0026rdquo; để mở trang quản lý IAM role. Trong trang IAM role, nhấn Add permissions và chọn Attach policies. Tìm kiếm và chọn chính sách AmazonDynamoDBFullAccess để cấp quyền truy cập đầy đủ vào DynamoDB. Bạn cũng có thể tạo một chính sách tùy chỉnh nếu muốn giới hạn quyền truy cập. Nhấn Attach policy để áp dụng chính sách này cho IAM role của Lambda function. Quay lại trang quản lý Lambda function, bạn sẽ thấy IAM role đã được cập nhật với chính sách mới. "
},
{
	"uri": "//localhost:1313/vi/4-s3log/4.2-creates3bucket/",
	"title": "Tạo S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ tạo 1 S3 bucket để lưu trữ các session logs được gửi từ các EC2 instance.\nTạo S3 Bucket Truy cập giao diện quản trị dịch vụ S3 Click Create bucket. Tại trang Create bucket. Tại mục Bucket name điền tên bucket lab-yourname-bucket-0001 Tại mục Region chọn Region bạn đang làm lab hiện tại. Tên S3 bucket phải đảm bảo không trùng với toàn bộ S3 bucket khác trong hệ thống. Bạn có thể thay thế tên mình và điền số ngẫu nhiên khi tạo tên S3 bucket.\nKéo chuột xuống phía dưới và click Create bucket. Khi tạo S3 bucket chúng ta đã thực hiện Block all public access nên các EC2 instance của chúng ta sẽ không thể kết nối tới S3 thông qua mạng internet. Trong bước tiếp theo chúng ta sẽ cấu hình tính năng S3 Gateway Endpoint để cho phép các EC2 instance có thể kết nối tới S3 bucket thông qua mạng nội bộ của VPC.\n"
},
{
	"uri": "//localhost:1313/vi/3-accessibilitytoinstances/3.2-private-instance/3.2.2-createvpcendpoint/",
	"title": "Tạo VPC Endpoint",
	"tags": [],
	"description": "",
	"content": "Tạo VPC Endpoint SSM Chúng ta sẽ tạo 3 interface endpoint yêu cầu bởi Session Manager: Interface endpoint: com.amazonaws.region.ssm com.amazonaws.region.ec2messages com.amazonaws.region.ssmmessages Bạn có thể tham khảo thêm tại đây\nNội dung: Tạo Endpoint ssm Tạo Endpoint ssmmessages Tạo Endpoint ec2messages "
},
{
	"uri": "//localhost:1313/vi/3-accessibilitytoinstances/3.2-private-instance/3.2.3-connectec2/",
	"title": "Kết nối EC2 Private",
	"tags": [],
	"description": "",
	"content": "Gán IAM role và restart EC2 instance. Truy cập giao diện quản trị dịch vụ EC2 Click chọn Private Windows Instance. Click Actions. Click Security. Click Modify IAM Role. Tại trang Modify IAM Role. Tại mục IAM role, chọn SSM-Role. Click Save. Click chọn Private Windows Instance. Click Instance state. Click Reboot instance để thực hiện restart, sau đó click Reboot để xác nhận. Bạn hãy đợi 5 phút trước khi làm bước tiếp theo nhé.\nKết nối tới máy chủ private EC2 instance. Truy cập vào giao diện quản trị dịch vụ System Manager - Session Manager Click Start session. Click chọn Private Windows Instance. Click Start session. Gõ lệnh ipconfig để kiểm tra thông tin địa chỉ IP của Private Windows Instance như dưới đây. "
},
{
	"uri": "//localhost:1313/vi/3-accessibilitytoinstances/3.2-private-instance/3.2.2-createvpcendpoint/3.2.2.3-endpointec2messages/",
	"title": "Tạo Endpoint ec2messages",
	"tags": [],
	"description": "",
	"content": "Tạo VPC Endpoint EC2MESSAGES Truy cập đến giao diện quản trị của dịch vụ VPC Click Endpoints. Click Create endpoint. Tại trang Create endpoint. Tại mục Name tag điền SSMMESSAGES. Tại mục Service Category chọn AWS Services. Tại mục Service Name, Tại mục Service category chọn: AWS services Tại mục Service Name nhập: ec2 sau đó chọn Service Name: com.amazonaws.ap-southeast-1.ec2messages. Tại cột Service Name, click chọn com.amazonaws.ap-southeast-1.ec2messages. Tại mục VPC, chọn Lab VPC. Chọn AZ đầu tiên, sau đó chọn subnet Lab Private Subnet. Kéo chuột xuống dưới. Tại mục Security Group, chọn Security group SG VPC Endpoint mà chúng ta đã tạo trước đó. Tại mục Policy, chọn Full access Kéo chuột xuống dưới cùng. Click Create endpoint. Chúng ta đã tạo xong VPC Interface Endpoint EC2MESSAGES.\nĐảm bảo 3 endpoint cần thiết đã được tạo như hình dưới.\n"
},
{
	"uri": "//localhost:1313/vi/3-accessibilitytoinstances/",
	"title": "Tạo kết nối đến máy chủ EC2",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ thực hiện tạo kết nối đến các máy chủ EC2 của chúng ta, nằm trong cả public và private subnet.\nNội dung 3.1. Tạo Kết nối đến máy chủ EC2 Public 3.2. Tạo Kết nối đến máy chủ EC2 Private\n"
},
{
	"uri": "//localhost:1313/vi/4-s3log/4.3-creategwes3/",
	"title": "Tạo S3 Gateway endpoint",
	"tags": [],
	"description": "",
	"content": " Truy cập vào giao diện quản trị dịch vụ VPC Click Endpoints. Click Create endpoint. Tại trang Create endpoint. Tại mục Name tag điền S3GW. Tại mục Service Category click chọn AWS services. Tại ô tìm kiếm điền S3, sau đó chọn com.amazonaws.[region].s3 Tại mục Services chọn com.amazonaws.[region].s3 có Type là Gateway. Tại mục VPC , chọn Lab VPC. Tại mục Route tables, chọn cả 2 route table. Kéo chuột xuống dưới cùng, click Create endpoint. Bước tiếp theo chúng ta sẽ tiến hành cấu hình Session Manager để có thể lưu trữ các session logs tới S3 bucket chúng ta đã tạo.\n"
},
{
	"uri": "//localhost:1313/vi/4-s3log/",
	"title": "Quản lý session logs",
	"tags": [],
	"description": "",
	"content": "Với Session Manager chúng ta có thể xem được lịch sử các kết nối tới các instance thông qua Session history. Tuy nhiên chúng ta chưa xem được chi tiết các câu lệnh được sử dụng.\nTrong phần này chúng ta sẽ tiến hành tạo S3 bucket và thực hiện cấu hình lưu trữ các session logs để xem được chi tiết các câu lệnh được sử dụng trong session.\nNội dung: Cập nhật IAM Role Tạo S3 Bucket Tạo S3 Gateway endpoint Cấu hình Session logs "
},
{
	"uri": "//localhost:1313/vi/4-s3log/4.4-configsessionlogs/",
	"title": "Theo dõi session logs",
	"tags": [],
	"description": "",
	"content": "Theo dõi session logs Truy cập giao diện quản trị dịch vụ System Manager - Session Manager Click tab Preferences. Click Edit. Kéo chuột xuống phía dưới, tại mục S3 logging, click chọn Enable. Bỏ chọn Allow only encrypted S3 buckets. Click chọn Choose a bucket name from the list. Chọn S3 bucket bạn đã tạo. Kéo chuột xuống phía dưới, click Save để lưu cấu hình.\nTruy cập giao diện quản trị dịch vụ System Manager - Session Manager\nClick Start session. Click chọn Private Windows Instance. Click Start session. Gõ lệnh ipconfig. Gõ lệnh hostname. Click Terminate để thoát session, click Terminate 1 lần nữa để xác nhận. Kiểm tra Session logs trong S3 Truy cập vào giao diện quản trị dịch vụ S3 Click vào tên S3 bucket chúng ta đã tạo cho bài lab. Click vào tên file sessions log Tại trang chi tiết objects , click Open. File logs sẽ được mở ở 1 tab mới trên trình duyệt.Bạn có thể xem các câu lệnh đã được lưu trữ lại trong session logs. "
},
{
	"uri": "//localhost:1313/vi/5-portfwd/",
	"title": "Port Forwarding",
	"tags": [],
	"description": "",
	"content": "\rPort Forwarding là mốt cách thức hữu ích để chuyển hướng lưu lượng mạng từ 1 địa chỉ IP - Port này sang 1 địa chỉ IP - Port khác. Với Port Forwarding chúng ta có thể truy cập một EC2 instance nằm trong private subnet từ máy trạm của chúng ta.\nChúng ta sẽ cấu hình Port Forwarding cho kết nối RDP giữa máy của mình với Private Windows Instance nằm trong private subnet mà chúng ta đã tạo cho bài thực hành này.\nTạo IAM User có quyền kết nối SSM Truy cập vào giao diện quản trị dịch vụ IAM Click Users , sau đó click Add users. Tại trang Add user. Tại mục User name, điền Portfwd. Click chọn Access key - Programmatic access. Click Next: Permissions. Click Attach existing policies directly. Tại ô tìm kiếm , điền ssm. Click chọn AmazonSSMFullAccess. Click Next: Tags, click Next: Reviews. Click Create user. Lưu lại thông tin Access key ID và Secret access key để thực hiện cấu hình AWS CLI. Cài đặt và cấu hình AWS CLI và Session Manager Plugin Để thực hiện phần thực hành này, đảm bảo máy trạm của bạn đã cài AWS CLI và Session Manager Plugin\nBạn có thể tham khảo thêm bài thực hành về cài đặt và cấu hình AWS CLI tại đây.\nVới Windows thì khi giải nén thư mục cài đặt Session Manager Plugin bạn hãy chạy file install.bat với quyền Administrator để thực hiện cài đặt.\nThực hiện Portforwarding Chạy command dưới đây trong Command Prompt trên máy của bạn để cấu hình Port Forwarding. aws ssm start-session --target (your ID windows instance) --document-name AWS-StartPortForwardingSession --parameters portNumber=\u0026#34;3389\u0026#34;,localPortNumber=\u0026#34;9999\u0026#34; --region (your region) Thông tin Instance ID của Windows Private Instance có thể tìm được khi bạn xem chi tiết máy chủ EC2 Windows Private Instance.\nCâu lệnh ví dụ C:\\Windows\\system32\u0026gt;aws ssm start-session --target i-06343d7377486760c --document-name AWS-StartPortForwardingSession --parameters portNumber=\u0026#34;3389\u0026#34;,localPortNumber=\u0026#34;9999\u0026#34; --region ap-southeast-1 Nếu câu lệnh của bạn báo lỗi như dưới đây : SessionManagerPlugin is not found. Please refer to SessionManager Documentation here: http://docs.aws.amazon.com/console/systems-manager/session-manager-plugin-not-found\nChứng tỏ bạn chưa cài Session Manager Plugin thành công. Bạn có thể cần khởi chạy lại Command Prompt sau khi cài Session Manager Plugin.\nKết nối tới Private Windows Instance bạn đã tạo bằng công cụ Remote Desktop trên máy trạm của bạn. Tại mục Computer: điền localhost:9999. Quay trở lại giao diện quản trị của dịch vụ System Manager - Session Manager. Click tab Session history. Chúng ta sẽ thấy các session logs với tên Document là AWS-StartPortForwardingSession. Chúc mừng bạn đã hoàn tất bài thực hành hướng dẫn cách sử dụng Session Manager để kết nối cũng như lưu trữ các session logs trong S3 bucket. Hãy nhớ thực hiện bước dọn dẹp tài nguyên để tránh sinh chi phí ngoài ý muốn nhé.\n"
},
{
	"uri": "//localhost:1313/vi/6-cleanup/",
	"title": "Dọn dẹp tài nguyên  ",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ tiến hành các bước sau để xóa các tài nguyên chúng ta đã tạo trong bài thực hành này.\nXóa EC2 instance Truy cập giao diện quản trị dịch vụ EC2 Click Instances. Click chọn cả 2 instance Public Linux Instance và Private Windows Instance. Click Instance state. Click Terminate instance, sau đó click Terminate để xác nhận. Truy cập giao diện quản trị dịch vụ IAM Click Roles. Tại ô tìm kiếm , điền SSM. Click chọn SSM-Role. Click Delete, sau đó điền tên role SSM-Role và click Delete để xóa role. Click Users. Click chọn user Portfwd. Click Delete, sau đó điền tên user Portfwd và click Delete để xóa user. Xóa S3 bucket Truy cập giao diện quản trị dịch vụ System Manager - Session Manager. Click tab Preferences. Click Edit. Kéo chuột xuống dưới. Tại mục S3 logging. Bỏ chọn Enable để tắt tính năng logging. Kéo chuột xuống dưới. Click Save. Truy cập giao diện quản trị dịch vụ S3 Click chọn S3 bucket chúng ta đã tạo cho bài thực hành. ( Ví dụ : lab-fcj-bucket-0001 ) Click Empty. Điền permanently delete, sau đó click Empty để tiến hành xóa object trong bucket. Click Exit. Sau khi xóa hết object trong bucket, click Delete Điền tên S3 bucket, sau đó click Delete bucket để tiến hành xóa S3 bucket. Xóa các VPC Endpoint Truy cập vào giao diện quản trị dịch vụ VPC Click Endpoints. Chọn 4 endpoints chúng ta đã tạo cho bài thực hành bao gồm SSM, SSMMESSAGES, EC2MESSAGES, S3GW. Click Actions. Click Delete VPC endpoints. Tại ô confirm , điền delete. Click Delete để tiến hành xóa các endpoints. Click biểu tượng refresh, kiểm tra tất cả các endpoints đã bị xóa trước khi làm bước tiếp theo. Xóa VPC Truy cập vào giao diện quản trị dịch vụ VPC Click Your VPCs. Click chọn Lab VPC. Click Actions. Click Delete VPC. Tại ô confirm, điền delete để xác nhận, click Delete để thực hiện xóa Lab VPC và các tài nguyên liên quan. "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]